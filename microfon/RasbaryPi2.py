import os
import numpy as np
import torch
import torch.nn as nn
import librosa
import warnings
from sklearn.preprocessing import LabelEncoder
import time
import threading
import socket
import struct
import asyncio
import websockets
import json
import argparse

# –ò–º–ø–æ—Ä—Ç TensorFlow –≤–º–µ—Å—Ç–æ tflite_runtime
try:
    import tensorflow as tf
    TENSORFLOW_AVAILABLE = True
except ImportError:
    TENSORFLOW_AVAILABLE = False
    print("–í–ù–ò–ú–ê–ù–ò–ï: TensorFlow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–µ–º–æ-—Ä–µ–∂–∏–º –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    print("–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TensorFlow –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install tensorflow")

def find_model_file(filename):
    """–ò—â–µ—Ç —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö"""
    possible_paths = [
        filename,                     # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        f"../{filename}",             # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        f"../../{filename}",          # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞ –¥–≤–∞ —É—Ä–æ–≤–Ω—è –≤—ã—à–µ
        f"../../../{filename}",       # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞ —Ç—Ä–∏ —É—Ä–æ–≤–Ω—è –≤—ã—à–µ
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            print(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {path}")
            return path
    
    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª {filename} –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Å—Ç:")
    for path in possible_paths:
        print(f"  - {path}")
    return None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PORTS = [5000, 5001, 5002, 5003]
TARGET_SAMPLE_RATE = 44100
N_MFCC = 40
MODEL_PATH = 'sound_classifier_model.pth'
TFLITE_MODEL_PATH = 'soundclassifier_with_metadata.tflite'
LABELS_PATH = 'labels.txt'
BUFFER_SIZE = 44100 * 2  # 2 —Å–µ–∫—É–Ω–¥—ã –∞—É–¥–∏–æ
MAX_PACKET_SIZE = 4096
DROPOUT_RATE = 0.6
DATA_DIRS = {
    'train': 'train',
    'valid': 'valid',
    'test': 'test'
}
WEBSOCKET_PORT = 8765  # –ü–æ—Ä—Ç –¥–ª—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞
DEBUG_MODE = False  # –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
connected_clients = set()

# –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–¥—Ä–æ–Ω –∏–ª–∏ —Ö–ª–æ–ø–æ–∫)
OPERATING_MODE = "drone"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–∂–∏–º –¥—Ä–æ–Ω–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ WebSocket
async def send_to_clients(data):
    if connected_clients:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        # –°–æ–∑–¥–∞–µ–º JSON-–æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        message = json.dumps(data)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
        try:
            await asyncio.gather(
                *[client.send(message) for client in connected_clients],
                return_exceptions=True
            )
            print(f"WebSocket: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–∫—Ç–æ—Ä–µ '{data['sector']}' {len(connected_clients)} –∫–ª–∏–µ–Ω—Ç–∞–º")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ WebSocket –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
    else:
        print("WebSocket: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
    return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
async def websocket_handler(websocket, path):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    connected_clients.add(websocket)
    print(f"–ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {len(connected_clients)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await websocket.send(json.dumps({"status": "connected", "message": "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"}))
        # –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º
        await websocket.wait_closed()
    finally:
        # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        connected_clients.remove(websocket)
        print(f"WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {len(connected_clients)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")

# –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
async def start_websocket_server():
    print(f"–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {WEBSOCKET_PORT}...")
    async with websockets.serve(websocket_handler, "0.0.0.0", WEBSOCKET_PORT):
        await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

class SoundClassifier:
    def __init__(self, mode="drone"):
        global OPERATING_MODE
        OPERATING_MODE = mode
        
        self.le = LabelEncoder()
        self.model = None
        self.running = True
        self.lock = threading.Lock()
        self.audio_buffers = {port: np.array([], dtype=np.float32) for port in PORTS}
        self.last_predictions = {}
        self.sample_rates = {}
        self.sockets = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∫–µ—Ç–æ–≤
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        self.last_detection_time = 0
        self.current_active_sector = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–µ–π –∫ –¥–∞–Ω–Ω—ã–º
        self.data_dir = DATA_DIRS['train']
        self.valid_dir = DATA_DIRS['valid']
        self.test_dir = DATA_DIRS['test']
        
        print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ä–µ–∂–∏–º–µ: {OPERATING_MODE}")
        
        if OPERATING_MODE == "drone":
            if not self.load_model():  # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
                self.init_training()    # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        else:  # –†–µ–∂–∏–º —Ö–ª–æ–ø–∫–∞
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ TensorFlow
            if not TENSORFLOW_AVAILABLE:
                print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TensorFlow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —Ö–ª–æ–ø–∫–∞!")
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TensorFlow: pip install tensorflow")
                print("–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ install_dependencies.bat")
                print("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥—Ä–æ–Ω–∞...")
                OPERATING_MODE = "drone"
                if not self.load_model():  # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
                    self.init_training()   # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            elif not self.load_tflite_model():
                print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å TensorFlow –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ö–ª–æ–ø–∫–∞!")
                print("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥—Ä–æ–Ω–∞...")
                OPERATING_MODE = "drone"
                if not self.load_model():  # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
                    self.init_training()   # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            
        self.init_network()

    def load_tflite_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ TensorFlow –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ö–ª–æ–ø–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ TensorFlow
            if not TENSORFLOW_AVAILABLE:
                print("–û—à–∏–±–∫–∞: TensorFlow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
                return False
                
            # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
            tflite_path = find_model_file(TFLITE_MODEL_PATH)
            if not tflite_path:
                print(f"–§–∞–π–ª TFLite –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return False
                
            # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –º–µ—Ç–æ–∫
            labels_path = find_model_file(LABELS_PATH)
            if not labels_path:
                print(f"–§–∞–π–ª –º–µ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                labels_path = None  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
            # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ TensorFlow Lite —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
            self.interpreter = tf.lite.Interpreter(model_path=tflite_path)
            self.interpreter.allocate_tensors()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ö–æ–¥–Ω—ã—Ö –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–µ–Ω–∑–æ—Ä–∞—Ö
            self.input_details = self.interpreter.get_input_details()
            self.output_details = self.interpreter.get_output_details()
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–æ–∫ –∫–ª–∞—Å—Å–æ–≤
            if labels_path and os.path.exists(labels_path):
                with open(labels_path, 'r', encoding='utf-8') as f:
                    self.labels = [line.strip().split(' ', 1)[1] for line in f.readlines()]
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤: {self.labels}")
            else:
                print(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–µ—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                self.labels = ["Class 2", "–§–æ–Ω–æ–≤—ã–π —à—É–º"]  # –ú–µ—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
            print(f"TensorFlow Lite –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ TensorFlow –º–æ–¥–µ–ª–∏: {str(e)}")
            return False

    # üîÑ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ save_model
    def save_model(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –¥–∏—Å–∫"""
        try:
            torch.save({
                'model_state_dict': self.model.state_dict(),
                'le_classes': self.le.classes_,
                'sample_rates': self.sample_rates,
                'input_size': N_MFCC,
                'num_classes': len(self.le.classes_)
            }, MODEL_PATH)
            print(f"–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {MODEL_PATH}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
            raise

    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –¥–∏—Å–∫–∞"""
        if os.path.exists(MODEL_PATH):
            try:
                checkpoint = torch.load(
                    MODEL_PATH,
                    map_location='cpu',
                    weights_only=False
                )
                self.le.classes_ = checkpoint['le_classes']
                self.sample_rates = checkpoint.get('sample_rates', {})
                
                # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
                input_size = checkpoint['input_size']
                hidden_size = 256  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 256 –Ω–µ–π—Ä–æ–Ω–æ–≤ –≤ —Å–∫—Ä—ã—Ç–æ–º —Å–ª–æ–µ
                num_classes = checkpoint['num_classes']
                
                self.model = nn.Sequential(
                    nn.Linear(input_size, hidden_size),
                    nn.BatchNorm1d(hidden_size),
                    nn.ReLU(),
                    nn.Dropout(DROPOUT_RATE),
                    nn.Linear(hidden_size, hidden_size // 2),
                    nn.BatchNorm1d(hidden_size // 2),
                    nn.ReLU(),
                    nn.Dropout(DROPOUT_RATE),
                    nn.Linear(hidden_size // 2, num_classes)
                )
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞
                self.model.load_state_dict(checkpoint['model_state_dict'])
                print(f"–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {MODEL_PATH}")
                return True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
                return False
        print("–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    def init_training(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –º–æ–¥–µ–ª–∏"""
        print("\n" + "="*60)
        print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è...")
        print("="*60 + "\n")
        
        try:
            self.load_data()
            self.create_model()
            self.train(num_epochs=3000)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö –¥–æ 3000
            self.save_model()
            print("\n–û–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n")
            self.load_model()
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {str(e)}")
            exit(1)

    def load_data(self):
        def load_from_dir(dir_path):
            if not os.path.exists(dir_path):
                raise FileNotFoundError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
            X, y = [], []
            file_count = 0
            start_time = time.time()
            
            try:
                for label in os.listdir(dir_path):
                    if not self.running:
                        raise KeyboardInterrupt
                        
                    label_dir = os.path.join(dir_path, label)
                    if not os.path.isdir(label_dir):
                        print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {label_dir} - –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è")
                        continue
                        
                    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞—Å—Å–∞: {label}")
                    files = [f for f in os.listdir(label_dir) if f.endswith('.wav')]
                    if not files:
                        print(f"–í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ—Ç .wav —Ñ–∞–π–ª–æ–≤ –≤ {label_dir}")
                        continue
                        
                    for file in files:
                        try:
                            if not self.running:
                                raise KeyboardInterrupt
                                
                            file_path = os.path.join(label_dir, file)
                            file_count += 1
                            
                            audio, sr = librosa.load(file_path, sr=None, mono=True)
                            if sr != TARGET_SAMPLE_RATE:
                                audio = librosa.resample(audio, orig_sr=sr, target_sr=TARGET_SAMPLE_RATE)
                                
                            with warnings.catch_warnings():
                                warnings.simplefilter("ignore")
                                mfcc = librosa.feature.mfcc(
                                    y=audio,
                                    sr=TARGET_SAMPLE_RATE,
                                    n_mfcc=N_MFCC,
                                    n_fft=2048,
                                    hop_length=512
                                )
                                
                            X.append(np.mean(mfcc.T, axis=0))
                            y.append(label)
                            
                            if file_count % 10 == 0:
                                elapsed = time.time() - start_time
                                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {file_count} —Ñ–∞–π–ª–æ–≤ ({elapsed:.1f} —Å–µ–∫)")
                                
                        except KeyboardInterrupt:
                            print("\n–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
                            self.running = False
                            raise
                            
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {str(e)}")
                            continue
                            
            except KeyboardInterrupt:
                print("\n–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                self.running = False
                raise
                
            print(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {file_count} —Ñ–∞–π–ª–æ–≤")
            return np.array(X, dtype=np.float32), np.array(y)

        try:
            for path in [self.data_dir, self.valid_dir, self.test_dir]:
                if not os.path.exists(path):
                    raise FileNotFoundError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            print("\n–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            self.X, self.y = load_from_dir(self.data_dir)
            self.y_encoded = self.le.fit_transform(self.y)
            
            print("\n–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            self.X_valid, self.y_valid = load_from_dir(self.valid_dir)
            self.y_encoded_valid = self.le.transform(self.y_valid)
            
            print("\n–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            self.X_test, self.y_test = load_from_dir(self.test_dir)
            self.y_encoded_test = self.le.transform(self.y_test)
            
            print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
            self._print_dataset_stats("–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ", self.y)
            self._print_dataset_stats("–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ", self.y_valid)
            self._print_dataset_stats("–¢–µ—Å—Ç–æ–≤—ã–µ", self.y_test)
            
        except KeyboardInterrupt:
            print("\n–ü–æ–ª–Ω–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
            self.running = False
            raise
            
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            self.running = False
            raise

    def _print_dataset_stats(self, name, labels):
        unique, counts = np.unique(labels, return_counts=True)
        print(f"{name} –¥–∞–Ω–Ω—ã–µ:")
        for label, count in zip(unique, counts):
            print(f"  {label}: {count} –ø—Ä–∏–º–µ—Ä–æ–≤")
        print(f"–í—Å–µ–≥–æ: {len(labels)} –ø—Ä–∏–º–µ—Ä–æ–≤\n")

    def create_model(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        input_size = 40  # –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (MFCC)
        hidden_size = 256  # –†–∞–∑–º–µ—Ä —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ—è
        num_classes = 2  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤ (–¥—Ä–æ–Ω/—Ñ–æ–Ω)
        
        self.model = nn.Sequential(
            nn.Linear(input_size, hidden_size),
            nn.BatchNorm1d(hidden_size),
            nn.ReLU(),
            nn.Dropout(DROPOUT_RATE),
            nn.Linear(hidden_size, hidden_size // 2),
            nn.BatchNorm1d(hidden_size // 2),
            nn.ReLU(),
            nn.Dropout(DROPOUT_RATE),
            nn.Linear(hidden_size // 2, num_classes)
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤
        for m in self.model.modules():
            if isinstance(m, nn.Linear):
                nn.init.kaiming_normal_(m.weight)
                nn.init.zeros_(m.bias)
        
        self.criterion = nn.CrossEntropyLoss()
        self.optimizer = torch.optim.Adam(self.model.parameters(), lr=0.001)

    def train(self, num_epochs=250):
        X_tensor = torch.tensor(self.X, dtype=torch.float32)
        y_tensor = torch.tensor(self.y_encoded, dtype=torch.long)
    
        train_losses = []
        valid_losses = []
        train_accuracies = []
        valid_accuracies = []
        learning_rates = []
    
        try:
            for epoch in range(num_epochs):
                if not self.running:
                    raise KeyboardInterrupt
                
            # –û–±—É—á–µ–Ω–∏–µ
                self.model.train()
                self.optimizer.zero_grad()
                outputs = self.model(X_tensor)
                loss = self.criterion(outputs, y_tensor)
                loss.backward()
                self.optimizer.step()
            
            # –†–∞—Å—á–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                _, preds = torch.max(outputs, 1)
                correct = (preds == y_tensor).sum().item()
                train_accuracy = correct / len(y_tensor) * 100
            
                train_losses.append(loss.item())
                train_accuracies.append(train_accuracy)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
                self.model.eval()
                with torch.no_grad():
                    valid_outputs = self.model(torch.tensor(self.X_valid, dtype=torch.float32))
                    valid_loss = self.criterion(valid_outputs, torch.tensor(self.y_encoded_valid, dtype=torch.long))
                
                # –†–∞—Å—á–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    _, valid_preds = torch.max(valid_outputs, 1)
                    valid_correct = (valid_preds == torch.tensor(self.y_encoded_valid, dtype=torch.long)).sum().item()
                    valid_accuracy = valid_correct / len(self.y_encoded_valid) * 100
                
                    valid_losses.append(valid_loss.item())
                    valid_accuracies.append(valid_accuracy)
            
                learning_rates.append(self.optimizer.param_groups[0]['lr'])
            
                print(f"–≠–ø–æ—Ö–∞ [{epoch+1}/{num_epochs}] | "
                    f"–ü–æ—Ç–µ—Ä—è: {loss.item():.4f} | –í–∞–ª–∏–¥–∞—Ü–∏—è: {valid_loss.item():.4f} | "
                    f"–¢–æ—á–Ω–æ—Å—Ç—å: {train_accuracy:.2f}% | –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {valid_accuracy:.2f}%")

        except KeyboardInterrupt:
            print("\n–û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.running = False
        
        finally:
            self.analyze_training(
                train_losses, 
                valid_losses,
                train_accuracies,
                valid_accuracies,
                learning_rates
            )


    def analyze_training(self, train_losses, valid_losses, train_accuracies, valid_accuracies, learning_rates):
        print("\n" + "="*60)
        print("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—É—á–µ–Ω–∏—è:")
        print("="*60)
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏
        max_train_acc = max(train_accuracies)
        min_train_acc = min(train_accuracies)
        final_train_acc = train_accuracies[-1]
    
        max_valid_acc = max(valid_accuracies)
        min_valid_acc = min(valid_accuracies)
        final_valid_acc = valid_accuracies[-1]
    
        print(f"\n–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:")
        print(f"  –ù–∞—á–∞–ª—å–Ω–∞—è: {train_accuracies[0]:.2f}%")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max_train_acc:.2f}% (—ç–ø–æ—Ö–∞ {train_accuracies.index(max_train_acc)+1})")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min_train_acc:.2f}% (—ç–ø–æ—Ö–∞ {train_accuracies.index(min_train_acc)+1})")
        print(f"  –§–∏–Ω–∞–ª—å–Ω–∞—è: {final_train_acc:.2f}%")
    
        print(f"\n–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:")
        print(f"  –ù–∞—á–∞–ª—å–Ω–∞—è: {valid_accuracies[0]:.2f}%")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max_valid_acc:.2f}% (—ç–ø–æ—Ö–∞ {valid_accuracies.index(max_valid_acc)+1})")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min_valid_acc:.2f}% (—ç–ø–æ—Ö–∞ {valid_accuracies.index(min_valid_acc)+1})")
        print(f"  –§–∏–Ω–∞–ª—å–Ω–∞—è: {final_valid_acc:.2f}%")
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏
        print("\n–î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏:")
        for epoch, (train_acc, valid_acc) in enumerate(zip(train_accuracies, valid_accuracies)):
            diff = valid_acc - train_acc
            status = "‚Üë‚Üë" if diff > 5 else "‚Üë‚Üì" if diff < -5 else "‚âà"
            print(f"–≠–ø–æ—Ö–∞ {epoch+1:2d}: Train {train_acc:6.2f}% | Valid {valid_acc:6.2f}% | –†–∞–∑–Ω–∏—Ü–∞ {diff:+5.2f}% {status}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if final_valid_acc < 60:
            print("  ‚ñ∏ –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
            print("    - –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞")
            print("    - –î–æ–±–∞–≤–∏—Ç—å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∞—É–¥–∏–æ")
            print("    - –ò–∑–º–µ–Ω–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–∏")
        elif final_valid_acc < 80:
            print("  ‚ñ∏ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
            print("    - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã (LR, —Å–ª–æ–∏)")
            print("    - –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—é")
        else:
            print("  ‚ñ∏ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    
        print("="*60 + "\n")

    def init_network(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∫–æ–¥–∞"""
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º UDP-—Å–æ–∫–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä—Ç–∞
        for port in PORTS:
            print(f"  –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞ {port}...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ UDP-—Å–æ–∫–µ—Ç–∞
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 65536)
            sock.bind(('0.0.0.0', port))
            sock.setblocking(False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∫–µ—Ç
            self.sockets[port] = sock
            print(f"  –ü–æ—Ä—Ç {port} –æ—Ç–∫—Ä—ã—Ç")
            
        # –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
        self._start_websocket_loop()
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        self.listeners = []
        for port in PORTS:
            thread = threading.Thread(
                target=self.network_listener,
                args=(port,),
                daemon=True
            )
            thread.start()
            self.listeners.append(thread)
            
        print("–°–µ—Ç–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.process_thread = threading.Thread(
            target=self.process_audio,
            daemon=True
        )
        self.process_thread.start()

    def _run_websocket_server(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            self.event_loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.event_loop)
            self.event_loop.run_until_complete(start_websocket_server())
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        finally:
            if hasattr(self, 'event_loop'):
                self.event_loop.close()

    def _start_websocket_loop(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.websocket_thread = threading.Thread(target=self._run_websocket_server, daemon=True)
        self.websocket_thread.start()

    def network_listener(self, port):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ—Ä—Ç–∞"""
        if port not in self.sockets:
            print(f"–ü–æ—Ä—Ç {port} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        sock = self.sockets[port]
        print(f"–°–ª—É—à–∞–µ–º –ø–æ—Ä—Ç {port}...")
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è Windows WSAEWOULDBLOCK
        WSAEWOULDBLOCK = 10035
        
        # –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á—Ä–µ–∑–º–µ—Ä–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        error_count = 0
        last_log_time = time.time()
        
        while self.running:
            try:
                data, addr = sock.recvfrom(MAX_PACKET_SIZE)
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                error_count = 0
                last_log_time = time.time()
                self.process_packet(port, data)
            except socket.error as e:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É WSAEWOULDBLOCK (–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö —Å–æ–∫–µ—Ç–æ–≤)
                error_code = e.args[0]
                if error_code == WSAEWOULDBLOCK:
                    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –æ WSAEWOULDBLOCK - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö —Å–æ–∫–µ—Ç–æ–≤
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –∏ –Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ –º–∏–Ω—É—Ç—É
                    current_time = time.time()
                    if DEBUG_MODE and (current_time - last_log_time > 60):
                        print(f"–ü–æ—Ä—Ç {port} –æ–∂–∏–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
                        last_log_time = current_time
                else:
                    # –≠—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞ - –µ—ë –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ–≥–¥–∞
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}: {str(e)}")
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU
                time.sleep(0.02)
            except Exception as e:
                print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}: {str(e)}")
                time.sleep(0.1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

    def process_packet(self, port, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
        try:
            if len(data) < 8:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ (timestamp + —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—ç–º–ø–ª)
                print(f"–ü–æ—Ä—Ç {port}: –ü–æ–ª—É—á–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞–∫–µ—Ç ({len(data)} –±–∞–π—Ç)")
                return
                
            timestamp = struct.unpack('d', data[:8])[0]
            audio_chunk = np.frombuffer(data[8:], dtype=np.float32)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
            if len(audio_chunk) == 0:
                print(f"–ü–æ—Ä—Ç {port}: –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ—á–∞–Ω–∫")
                return
                
            if np.isnan(audio_chunk).any() or np.isinf(audio_chunk).any():
                print(f"–ü–æ—Ä—Ç {port}: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö")
                return
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞
            rms = np.sqrt(np.mean(audio_chunk**2))
            if rms < 1e-6:  # –°–ª–∏—à–∫–æ–º —Ç–∏—Ö–∏–π —Å–∏–≥–Ω–∞–ª
                print(f"–ü–æ—Ä—Ç {port}: –°–∏–≥–Ω–∞–ª —Å–ª–∏—à–∫–æ–º —Ç–∏—Ö–∏–π (RMS: {rms})")
                return
            
            with self.lock:
                self.audio_buffers[port] = np.concatenate([
                    self.audio_buffers[port], 
                    audio_chunk
                ])[-BUFFER_SIZE:]
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}: {str(e)}")

    def predict(self, audio):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∞—É–¥–∏–æ—Å–∏–≥–Ω–∞–ª–∞"""
        if OPERATING_MODE == "drone":
            return self._predict_drone(audio)
        else:
            return self._predict_clap(audio)
            
    def _predict_drone(self, audio):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–≤—É–∫–∞ –¥—Ä–æ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PyTorch –º–æ–¥–µ–ª–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∞—É–¥–∏–æ
        if len(audio) < TARGET_SAMPLE_RATE:
            return "–§–æ–Ω–æ–≤—ã–π —à—É–º", 0.0  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ MFCC –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            mfccs = librosa.feature.mfcc(y=audio, sr=TARGET_SAMPLE_RATE, n_mfcc=N_MFCC)
            mfccs_processed = np.mean(mfccs.T, axis=0)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–Ω–∑–æ—Ä PyTorch
            features = torch.tensor(mfccs_processed, dtype=torch.float32).unsqueeze(0)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            with torch.no_grad():
                self.model.eval()
                logits = self.model(features)
                probabilities = torch.nn.functional.softmax(logits, dim=1)
                max_prob, predicted_class = torch.max(probabilities, 1)
                
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∫—É –∫–ª–∞—Å—Å–∞ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            class_name = self.le.classes_[predicted_class.item()]
            confidence = max_prob.item()
            
            return class_name, confidence
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (PyTorch): {str(e)}")
            return "–û—à–∏–±–∫–∞", 0.0
            
    def _predict_clap(self, audio):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–≤—É–∫–∞ —Ö–ª–æ–ø–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TensorFlow Lite –º–æ–¥–µ–ª–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∞—É–¥–∏–æ
        if len(audio) < TARGET_SAMPLE_RATE:
            return "–§–æ–Ω–æ–≤—ã–π —à—É–º", 0.0  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏
            rms = np.sqrt(np.mean(audio**2))
            dBFS = 20 * np.log10(rms) if rms > 0 else -np.inf
            
            # –ï—Å–ª–∏ –∑–≤—É–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä–æ–º–∫–∏–π, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ —Ö–ª–æ–ø–∫–æ–º
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –≤ -21 dBFS —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
            if dBFS > -21:
                print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –≥—Ä–æ–º–∫–∏–π –∑–≤—É–∫: {dBFS:.1f} dBFS - —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º –∫–∞–∫ —Ö–ª–æ–ø–æ–∫")
                return "Class 2", 1.0  # –û–±–Ω–∞—Ä—É–∂–∏–ª–∏ —Ö–ª–æ–ø–æ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏
            mfccs = librosa.feature.mfcc(y=audio, sr=TARGET_SAMPLE_RATE, n_mfcc=40)
            mfccs_processed = np.mean(mfccs.T, axis=0)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è TFLite –º–æ–¥–µ–ª–∏
            input_shape = self.input_details[0]['shape']
            input_data = np.expand_dims(mfccs_processed, axis=0).astype(np.float32)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ–∂–∏–¥–∞–µ–º–æ–π
            if input_data.shape != tuple(input_shape):
                # –ï—Å–ª–∏ –Ω–µ—Ç, –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
                input_data = np.resize(input_data, input_shape)
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            self.interpreter.set_tensor(self.input_details[0]['index'], input_data)
            self.interpreter.invoke()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            output_data = self.interpreter.get_tensor(self.output_details[0]['index'])
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
            predicted_idx = np.argmax(output_data[0])
            confidence = output_data[0][predicted_idx]
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∫—É –∫–ª–∞—Å—Å–∞
            class_name = self.labels[predicted_idx] if predicted_idx < len(self.labels) else f"–ö–ª–∞—Å—Å {predicted_idx}"
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ -30 dBFS
            if dBFS > -30:
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {class_name}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}, —É—Ä–æ–≤–µ–Ω—å: {dBFS:.1f} dBFS")
            
            return class_name, float(confidence)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (TFLite): {str(e)}")
            return "–û—à–∏–±–∫–∞", 0.0

    def process_audio(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ"""
        print("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ...")
        
        # –í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç—É—Å–∞
        print("\n" + "-"*82)
        print(f"{'–ü–æ—Ä—Ç':<8} {'–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ':<12} {'–°—Ç–∞—Ç—É—Å':<20} {'–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å':<10} {'–£—Ä–æ–≤–µ–Ω—å':<12} {'–ë—É—Ñ–µ—Ä':<10}")
        print("-"*82)
        print("\n" * 4)  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
            
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
        last_websocket_update = 0
            
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä–∞—Ö
                with self.lock:
                    all_empty = all(len(buf) == 0 for buf in self.audio_buffers.values())
                    if all_empty:
                        time.sleep(0.1)
                        continue
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –±—É—Ñ–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                current_buffers = {}
                
                with self.lock:
                    for port, buffer in self.audio_buffers.items():
                        current_buffers[port] = buffer.copy() if len(buffer) > 0 else np.array([], dtype=np.float32)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –±—É—Ñ–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ
                predictions = {}
                
                for port, buffer in current_buffers.items():
                    if len(buffer) == 0:
                        # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–ª–∏ "–º–æ–ª—á–∞–Ω–∏–µ"
                        predictions[port] = self.last_predictions.get(port, ("–§–æ–Ω–æ–≤—ã–π —à—É–º", 0.0, -np.inf))
                        continue
                    
                    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä—Ç–∞ –¥–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    class_name, confidence = self.predict(buffer)
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞ –≤ –¥–ë
                    if len(buffer) > 0:
                        rms = np.sqrt(np.mean(buffer**2))
                        dBFS = 20 * np.log10(rms) if rms > 0 else -np.inf
                    else:
                        dBFS = -np.inf
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —É—Ä–æ–≤–µ–Ω—å
                    predictions[port] = (class_name, confidence, dBFS)
                    self.last_predictions[port] = predictions[port]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∫—Ç–æ—Ä
                current_sector = self.determine_sector()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∫—Ç–æ—Ä–µ —á–µ—Ä–µ–∑ WebSocket
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 100 –º—Å –∏–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–µ–∫—Ç–æ—Ä–∞
                current_time = time.time()
                should_update = (current_time - last_websocket_update >= 0.1) or (current_sector != self.current_active_sector)
                
                if should_update and hasattr(self, 'event_loop'):
                    last_websocket_update = current_time
                    data_to_send = {
                        "sector": current_sector,
                        "timestamp": current_time
                    }
                    
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ WebSocket
                        future = asyncio.run_coroutine_threadsafe(
                            send_to_clients(data_to_send),
                            self.event_loop
                        )
                        # –î–æ–∂–∏–¥–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º 0.5 —Å–µ–∫—É–Ω–¥—ã
                        future.result(timeout=0.5)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ WebSocket: {str(e)}")
                        
                    # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ
                    print(f"WebSocket: –æ—Ç–ø—Ä–∞–≤–∫–∞ '({current_sector})' –≤ {len(connected_clients)} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
                
                # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä—Ç–∞
                print("\033[4A", end='')  # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ 4 —Å—Ç—Ä–æ–∫–∏ –≤–≤–µ—Ä—Ö
                
                for i, port in enumerate(PORTS):
                    if port in predictions:
                        pred = predictions[port]
                        status = "–î–†–û–ù –û–ë–ù–ê–†–£–ñ–ï–ù!" if OPERATING_MODE == "drone" and pred[0] == "class1" else \
                                "–•–õ–û–ü–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù!" if OPERATING_MODE == "clap" and pred[0] == "Class 2" else \
                                "–§–æ–Ω–æ–≤—ã–π —à—É–º"
                        confidence = f"{pred[1]:.1%}".rjust(8)
                        dBFS = f"{pred[2]:+.1f} dBFS".rjust(12)
                        
                        color = "\033[92m" if (OPERATING_MODE == "drone" and pred[0] == "class1") or \
                                             (OPERATING_MODE == "clap" and pred[0] == "Class 2") else "\033[93m"
                        reset = "\033[0m"
                        
                        buffer_size = len(self.audio_buffers[port])
                        
                        print(f"{port:<8} {i+1:<12} {color}{status:<20}{reset} {confidence:<10} {dBFS:<12} {buffer_size:<10}")
                    else:
                        print(f"{port:<8} {i+1:<12} {'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':<20} {'':<10} {'':<12} {0:<10}")
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–µ–∫—Ç–æ—Ä–µ
                print(f"–¢–µ–∫—É—â–∏–π —Å–µ–∫—Ç–æ—Ä: {current_sector}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–∞–º–∏
                time.sleep(0.1)
                
            except Exception as e:
                print(f"\n–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {str(e)}")
                time.sleep(1)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                
        print("\n–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ.")

    def determine_sector(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω–µ–π —Å–∏–≥–Ω–∞–ª–∞ —Å —Ä–∞–∑–Ω—ã—Ö –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤"""
        required_devices = PORTS
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        predictions = self.last_predictions
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if not all(dev_id in predictions for dev_id in required_devices):
            return "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö
        device_classes = {}
        
        activated_devices = []  # –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–µ–ª–µ–≤–æ–π –∑–≤—É–∫
        
        # –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Å–∏–≥–Ω–∞–ª–∞ –ø–æ –≤—Å–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞–º
        print("\n--- –û–¢–õ–ê–î–ö–ê –£–†–û–í–ù–ï–ô –°–ò–ì–ù–ê–õ–ê ---")
        for port in PORTS:
            if port in predictions:
                dBFS = predictions[port][2]
                print(f"–ú–∏–∫—Ä–æ—Ñ–æ–Ω {port}: {dBFS:.1f} dBFS")
        
        for dev_id in required_devices:
            pred = predictions[dev_id]
            if pred[0] == "error":
                return "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
            
            # –î–ª—è —Ä–µ–∂–∏–º–∞ –¥—Ä–æ–Ω–∞
            if OPERATING_MODE == "drone":
                try:
                    # –ö–ª–∞—Å—Å "class1" - –¥—Ä–æ–Ω
                    is_target = (pred[0] == "class1")
                    device_classes[dev_id] = 1 if is_target else 2
                    if is_target:
                        activated_devices.append(dev_id)
                except:
                    return f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∞: {pred[0]}"
            # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ö–ª–æ–ø–∫–æ–≤
            else:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å —Ö–ª–æ–ø–∫–∞ –∏ —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                    # Class 2 - —Ö–ª–æ–ø–æ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤—ã—à–µ 30%
                    is_target = (pred[0] == "Class 2" and pred[1] > 0.3)
                    # –¢–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –∑–≤—É–∫–∞, —Ç–µ–ø–µ—Ä—å —Å –ø–æ—Ä–æ–≥–æ–º -21 dBFS
                    sound_is_loud = (pred[2] > -21)  # –ï—Å–ª–∏ –≥—Ä–æ–º–∫–æ—Å—Ç—å –≤—ã—à–µ -21 dBFS
                    
                    # –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ–∫—Ç–æ—Ä–∞ –Ω—É–∂–µ–Ω –ª–∏–±–æ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –ª–∏–±–æ –≥—Ä–æ–º–∫–∏–π –∑–≤—É–∫
                    is_activated = (is_target or sound_is_loud)
                    device_classes[dev_id] = 1 if is_activated else 2
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    if is_activated:
                        activated_devices.append(dev_id)
                        print(f"–ü–æ—Ä—Ç {dev_id}: –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–µ–ª–µ–≤–æ–π –∑–≤—É–∫ - —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pred[1]:.1%}, –≥—Ä–æ–º–∫–æ—Å—Ç—å: {pred[2]:.1f} dBFS")
                    
                except:
                    return f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∞: {pred[0]}"

        # –£—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ü–µ–ª–µ–≤–æ–π –∑–≤—É–∫
        if all(cls == 2 for cls in device_classes.values()) or not activated_devices:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ 1 —Å–µ–∫—É–Ω–¥–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
            current_time = time.time()
            if current_time - self.last_detection_time > 1.0 and self.current_active_sector != "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω":
                print(f"–°–µ–∫—Ç–æ—Ä —Å–±—Ä–æ—à–µ–Ω - –ø—Ä–æ—à–ª–æ {current_time - self.last_detection_time:.1f} —Å–µ–∫ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")
                self.current_active_sector = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ —Å–µ–∫—Ç–æ—Ä–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
                if hasattr(self, 'event_loop'):
                    try:
                        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ
                        reset_data = {"sector": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω", "timestamp": current_time}
                        future = asyncio.run_coroutine_threadsafe(
                            send_to_clients(reset_data),
                            self.event_loop
                        )
                        # –î–æ–∂–∏–¥–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º 0.5 —Å–µ–∫—É–Ω–¥—ã
                        future.result(timeout=0.5)
                        print("WebSocket: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ —Å–µ–∫—Ç–æ—Ä–∞")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–±—Ä–æ—Å–µ —Å–µ–∫—Ç–æ—Ä–∞: {str(e)}")
                        
            return self.current_active_sector  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∫—Ç–æ—Ä
            
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —É—Ä–æ–≤–Ω–µ–π –∑–≤—É–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        active_sound_levels = {dev_id: predictions[dev_id][2] for dev_id in activated_devices}
        print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã –∏ –∏—Ö —É—Ä–æ–≤–Ω–∏: {active_sound_levels}")
            
        # –ù–∞—Ö–æ–¥–∏–º –º–∏–∫—Ä–æ—Ñ–æ–Ω —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –∑–≤—É–∫–∞ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        if active_sound_levels:
            max_device = max(active_sound_levels, key=lambda k: active_sound_levels[k])
            print(f"–í—ã–±—Ä–∞–Ω –ø–æ—Ä—Ç {max_device} —Å —É—Ä–æ–≤–Ω–µ–º {active_sound_levels[max_device]:.1f} dBFS")
            
            # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤
            max_level = active_sound_levels[max_device]
            print("\n--- –û–¢–õ–ê–î–ö–ê –†–ê–ó–ù–ò–¶–´ –£–†–û–í–ù–ï–ô ---")
            for port, level in active_sound_levels.items():
                diff = max_level - level
                print(f"–ü–æ—Ä—Ç {port}: —Ä–∞–∑–Ω–∏—Ü–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º {diff:.1f} –¥–ë")
            
            # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤ –º–µ–Ω—å—à–µ 2 –¥–ë, —Å—á–∏—Ç–∞–µ–º –∏—Ö —Ä–∞–≤–Ω—ã–º–∏
            # –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–µ–∫—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤
            similar_devices = [port for port, level in active_sound_levels.items() 
                               if (max_level - level) < 2.0]
            
            if len(similar_devices) > 1:
                print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏: {similar_devices}")
                
                # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –∏ –≤–µ—Ä—Ö–Ω–∏–µ, –∏ –Ω–∏–∂–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏,
                # –≤—ã–±–∏—Ä–∞–µ–º —Å–µ–∫—Ç–æ—Ä –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é
                upper_mics = [port for port in similar_devices if port in [5000, 5001]]
                lower_mics = [port for port in similar_devices if port in [5002, 5003]]
                
                if upper_mics and lower_mics:
                    print("–ê–∫—Ç–∏–≤–Ω—ã –∏ –≤–µ—Ä—Ö–Ω–∏–µ, –∏ –Ω–∏–∂–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã - –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è")
                    
                    avg_upper = sum(active_sound_levels[port] for port in upper_mics) / len(upper_mics)
                    avg_lower = sum(active_sound_levels[port] for port in lower_mics) / len(lower_mics)
                    
                    print(f"–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–µ—Ä—Ö–Ω–∏—Ö: {avg_upper:.1f} –¥–ë, –Ω–∏–∂–Ω–∏—Ö: {avg_lower:.1f} –¥–ë")
                    
                    if avg_upper > avg_lower:
                        max_device = upper_mics[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏–∑ –≤–µ—Ä—Ö–Ω–∏—Ö
                        print(f"–í—ã–±–∏—Ä–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã, –Ω–æ–≤—ã–π –ø–æ—Ä—Ç: {max_device}")
                    else:
                        max_device = lower_mics[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏–∑ –Ω–∏–∂–Ω–∏—Ö
                        print(f"–í—ã–±–∏—Ä–∞–µ–º –Ω–∏–∂–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã, –Ω–æ–≤—ã–π –ø–æ—Ä—Ç: {max_device}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ–∫—Ç–æ—Ä
            return self.current_active_sector
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å–µ–∫—Ç–æ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–∫–∏–µ –∂–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        if max_device == 5000:  # –ú–∏–∫—Ä–æ—Ñ–æ–Ω 1
            new_sector = "–°–í–ï–†–•–£-–°–õ–ï–í–ê"  # –ò–º–µ–Ω–Ω–æ —Ç–∞–∫ –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ - —Å –¥–µ—Ñ–∏—Å–æ–º!
        elif max_device == 5001:  # –ú–∏–∫—Ä–æ—Ñ–æ–Ω 2
            new_sector = "–°–í–ï–†–•–£-–°–ü–†–ê–í–ê"  # –ò–º–µ–Ω–Ω–æ —Ç–∞–∫ –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ - —Å –¥–µ—Ñ–∏—Å–æ–º!
        elif max_device == 5002 or max_device == 5003:  # –ú–∏–∫—Ä–æ—Ñ–æ–Ω—ã 3 –∏ 4
            new_sector = "–°–ù–ò–ó–£"  # –ò–º–µ–Ω–Ω–æ —Ç–∞–∫ –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ - –±–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!
        else:
            new_sector = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            
        print(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –Ω–æ–≤—ã–π —Å–µ–∫—Ç–æ—Ä: {new_sector}")
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ —Å–µ–∫—Ç–æ—Ä
        self.last_detection_time = time.time()
        self.current_active_sector = new_sector
            
        return new_sector

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
def parse_arguments():
    parser = argparse.ArgumentParser(description='–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–≤—É–∫–æ–≤ —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é')
    parser.add_argument('--mode', type=str, choices=['drone', 'clap'], default='drone',
                        help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: drone - –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–æ–Ω–æ–≤, clap - –¥–µ–º–æ-—Ä–µ–∂–∏–º —Å —Ö–ª–æ–ø–∫–∞–º–∏')
    return parser.parse_args()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == "__main__":
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = parse_arguments()
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    if args.mode == 'clap':
        print("\n" + "="*60)
        print("–ó–ê–ü–£–°–ö –í –î–ï–ú–û-–†–ï–ñ–ò–ú–ï –° –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï–ú –•–õ–û–ü–ö–û–í")
        print("="*60 + "\n")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏
        tflite_path = find_model_file(TFLITE_MODEL_PATH)
        labels_path = find_model_file(LABELS_PATH)
        
        if not tflite_path or not labels_path:
            print("\n–í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞.")
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç copy_model_files.bat –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
            print("–∏–ª–∏ –≤—Ä—É—á–Ω—É—é —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã soundclassifier_with_metadata.tflite –∏ labels.txt")
            print("–≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π.")
            print("\n–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥—Ä–æ–Ω–æ–≤...")
            args.mode = 'drone'
    else:
        print("\n" + "="*60)
        print("–ó–ê–ü–£–°–ö –í –†–ï–ñ–ò–ú–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –î–†–û–ù–û–í")
        print("="*60 + "\n")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    classifier = SoundClassifier(mode=args.mode)
    
    try:
        # –ü—Ä–æ—Å—Ç–æ –∂–¥–µ–º, –ø–æ–∫–∞ –ø–æ—Ç–æ–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
        while classifier.running:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        classifier.running = False
        print("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–∫–µ—Ç–æ–≤...")
        for sock in classifier.sockets.values():
            try:
                sock.close()
            except:
                pass
        print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")